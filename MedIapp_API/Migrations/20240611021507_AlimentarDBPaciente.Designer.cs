// <auto-generated />
using System;
using MedIapp_API.Datos;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedIapp_API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240611021507_AlimentarDBPaciente")]
    partial class AlimentarDBPaciente
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MedIapp_API.Modelos.Paciente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Examen")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ExamenNombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ExamenTipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Identificación")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Observacion")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Pacientes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Apellido = "Pérez",
                            Direccion = "Calle Falsa 123",
                            Email = "juan.perez@example.com",
                            Examen = new byte[] { 32, 32 },
                            ExamenNombre = "examen.pdf",
                            ExamenTipo = "application/pdf",
                            FechaNacimiento = new DateTime(1990, 5, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Identificación = "DNI12345678",
                            Nombre = "Juan",
                            Observacion = "Paciente con alergia a la penicilina",
                            Telefono = "123456789"
                        },
                        new
                        {
                            Id = 2,
                            Apellido = "Pérez",
                            Direccion = "Calle Falsa 123",
                            Email = "juan.perez@example.com",
                            Examen = new byte[] { 32, 32 },
                            ExamenNombre = "examen.pdf",
                            ExamenTipo = "application/pdf",
                            FechaNacimiento = new DateTime(1990, 5, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Identificación = "DNI12345678",
                            Nombre = "Pepito",
                            Observacion = "Paciente con alergia a la penicilina",
                            Telefono = "123456789"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
